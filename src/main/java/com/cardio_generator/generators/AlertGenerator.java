package com.cardio_generator.generators;

import java.util.Random;

import com.cardio_generator.outputs.OutputStrategy;

/**
 * AlertGenerator is simulating and generating alert data based on
 * patient conditions. It models the generation of alerts with
 * a probability model where alerts can be either triggered or
 * resolved based on predefined conditions.
 * 
 * The class maintains an array of alert states for each patient.
 * The alert state for a patient is marked as "triggered" when an
 * alert is active, and "resolved" when the alert is cleared.
 * 
 * Alerts are generated by the effect of a random process with a
 * predifined probability.
 * The class uses an exponential distribution to determine the 
 * likelihood of an alert upcoming.
 * 
 * @author Octavian
 */

public class AlertGenerator implements PatientDataGenerator {

    /** Random number generator used to simulate alert generation. */

    public static final Random randomGenerator = new Random();

    /** Array tracking the alert state for each patient, false means resolved,
     * true means trigerred.
     */
    private boolean[] AlertStates; // false = resolved, true = pressed

    /**
     * Constructs an {@code AlertGenerator} with a specified number of patients.
     * 
     * The constructor initializes an array to track the alert states for each patient.
     * 
     * @param patientCount Counts the number of patients to generate alerts for.
     */

    public AlertGenerator(int patientCount) {
        AlertStates = new boolean[patientCount + 1];
    }

    /**
     * Generates alert data for a specified patient.
     * 
     * The method checks the patient's current alert state, and if it is active,
     * it has a probability of 90% to solve the alert.
     * If no alert is active, it triggers a new one with a probability 
     * determined by an exponential distribution.
     * 
     * @param patientId Represents the ID of the patient for which the alert is
     * being generated
     * @param outputStrategy Is the strategy used to output the generated
     * alert data.
     */
    @Override
    public void generate(int patientId, OutputStrategy outputStrategy) {
        try {
            if (AlertStates[patientId]) {
                if (randomGenerator.nextDouble() < 0.9) { // 90% chance to resolve
                    AlertStates[patientId] = false;
                    // Output the alert
                    outputStrategy.output(patientId, System.currentTimeMillis(), "Alert", "resolved");
                }
            } else {
                double Lambda = 0.1; // Average rate (alerts per period), adjust based on desired frequency
                double p = -Math.expm1(-Lambda); // Probability of at least one alert in the period
                boolean alertTriggered = randomGenerator.nextDouble() < p;

                if (alertTriggered) {
                    AlertStates[patientId] = true;
                    // Output the alert
                    outputStrategy.output(patientId, System.currentTimeMillis(), "Alert", "triggered");
                }
            }
        } catch (Exception e) {
            System.err.println("An error occurred while generating alert data for patient " + patientId);
            e.printStackTrace();
        }
    }
}
